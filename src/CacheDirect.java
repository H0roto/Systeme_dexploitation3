import java.io.*;

public class CacheDirect {
    static int TEMPS_ACCES_RAM = 50;
    static int TEMPS_ACCES_CACHE = 5;
    static int TAILLE_BLOC = 32;
    static int DEPLACEMENT = 5;
    int[][] cache;
    int nbSucces;
    int nbEchec;
    double tempsMoyen;
    int nbbit;

    public CacheDirect(int n,String fichier) {
        this.cache = new int[(int) Math.pow(2, n)][TAILLE_BLOC];
        this.nbbit = n;
        try {
            File file = new File("src/tp1-fichiers-fournis/"+fichier);
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);

            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length == 2) {
                    Integer adresse = Integer.parseInt(parts[0]);
                    //System.out.println(adresse);
                    int deplacement = adresse & (TAILLE_BLOC - 1);
                    int noligne = (adresse >> DEPLACEMENT) & ((1 << this.nbbit) - 1);
                    int etiquette = adresse >> (DEPLACEMENT + this.nbbit);
                    if(this.cache[noligne][deplacement]==etiquette){
                        this.nbSucces+=1;
                        //System.out.println("HIP HIP HIP !");
                    }
                    else{
                        this.nbEchec+=1;
                       // System.out.println("BRUH");
                        this.cache[noligne][deplacement]=etiquette;
                    }
                    String acces = parts[1];
                } else {
                    System.out.println("Format de ligne non valide: " + line);
                }
            }
            br.close();
            System.out.println("Nombre de succès: "+this.nbSucces);
            System.out.println("Nombre d'échecs: "+this.nbEchec);
            this.tempsMoyen=(double)(this.nbSucces*TEMPS_ACCES_CACHE+this.nbEchec*TEMPS_ACCES_RAM)/(this.nbSucces+this.nbEchec);
            System.out.println("Temps moyen: "+Math.round(this.tempsMoyen * 100.0) / 100.0+" ns");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        double min=Integer.MAX_VALUE;
        int indmin=-1;
        for(int i=2;i<8;i++){
            System.out.println("Pour n égal à: "+i);
            CacheDirect cd=new CacheDirect(i,"matrice100.txt");
            if (cd.tempsMoyen<min) {
                min= cd.tempsMoyen;
                indmin=i;
            }
        }
        System.out.println("La meilleure valeur de n est: "+indmin);
        min=Integer.MAX_VALUE;
        indmin=-1;
        for(int i=2;i<8;i++){
            System.out.println("Pour n égal à: "+i);
            CacheDirect cd=new CacheDirect(i,"alea10.txt");
            if (cd.tempsMoyen<min) {
                min= cd.tempsMoyen;
                indmin=i;
            }
        }
        System.out.println("La meilleure valeur de n est: "+indmin);
        //C'est aléatoire donc il n'y a pas d'histoire de proximité spatiale ou encore temporelle.
    }
}
